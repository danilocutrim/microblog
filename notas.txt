A extensão Flask-Login funciona com o modelo de usuário do aplicativo e espera que certas propriedades e métodos sejam implementados nele. Essa abordagem é interessante, porque, desde que esses itens necessários sejam incluídos no modelo, o Flask-Login não possui nenhum outro requisito, portanto, por exemplo, ele pode trabalhar com modelos de usuário baseados em qualquer sistema de banco de dados.

Os quatro itens necessários estão listados abaixo:

is_authenticated: uma propriedade que é Truese o usuário tiver credenciais válidas ou Falsenão.
is_active: uma propriedade que é Truese a conta do usuário está ativa ou Falsenão.
is_anonymous: uma propriedade que é Falsepara usuários regulares e Truepara um usuário anônimo especial.
get_id(): um método que retorna um identificador exclusivo para o usuário como uma string (unicode, se estiver usando o Python 2).

Função de Carregador de Usuários
O Flask-Login acompanha o usuário conectado armazenando seu identificador exclusivo na sessão de usuário do Flask , um espaço de armazenamento atribuído a cada usuário que se conecta ao aplicativo. Cada vez que o usuário conectado navega para uma nova página, o Flask-Login recupera a ID do usuário da sessão e, em seguida, carrega esse usuário na memória.

Como o Flask-Login não sabe nada sobre bancos de dados, ele precisa da ajuda do aplicativo para carregar um usuário. Por esse motivo, a extensão espera que o aplicativo configure uma função de carregador de usuário, que pode ser chamada para carregar um usuário com o ID. Esta função pode ser adicionada no módulo app / models.py :

app / models.py : Função do carregador de usuário Flask-Login

from app import login
# ...

@login.user_loader
def load_user(id):
    return User.query.get(int(id))